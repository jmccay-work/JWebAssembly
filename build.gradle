plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'com.github.kt3k.coveralls' version '2.11.0' // Coverage
}

// Allow people to developers who build their own to put in a private/company script to
// load the custom maven publishing repository
// Set localRepositoryScript in gradle.properties.
if (project.hasProperty('localRepositoryScript') && localRepositoryScript.length() > 0) {
    File repScript = new File("$localRepositoryScript")
    if (repScript.exists()) {
        apply from: "$localRepositoryScript"
    }
}

sourceCompatibility = 1.8

group 'de.inetsoftware'
archivesBaseName = 'jwebassembly-compiler'
version = '0.4.0009'
String archivePreferredName = null;

// 
// Allow a developer building their own version the ability to add their own appendix.
// Set theAppendix in gradle.properties in the root directory.
if (project.hasProperty('theAppendix') && theAppendix.length() > 0) {
    archivePreferredName = String.format("%s-%s", archivesBaseName, "$theAppendix")
} else {
    archivePreferredName = archivesBaseName
}


repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' } // for snapshot of the API
}

dependencies {
    // "compileOnly" will not add as dependency. this is different to "compile". 
    compileOnly 'com.google.code.findbugs:jsr305:3.0.1'
    //compileOnly 'de.inetsoftware:jwebassembly-api:+'
    compileOnly 'com.github.i-net-software:jwebassembly-api:master-SNAPSHOT'

    testImplementation 'com.google.code.findbugs:jsr305:3.0.1'
    //testCompile 'de.inetsoftware:jwebassembly-api:+'
    testImplementation 'com.github.i-net-software:jwebassembly-api:master-SNAPSHOT'
    testImplementation 'junit:junit:+'
    testImplementation 'org.mockito:mockito-core:4.+'
    testImplementation 'org.apache.commons:commons-compress:1.2'
    testImplementation 'com.google.code.gson:gson:+'
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'src'
        }
    }
    test {
        java {
            srcDir 'test'
        }
        resources {
            srcDir 'test'
        }
    }
}

compileJava.options.encoding = 'UTF-8'
compileJava.options.compilerArgs += ['-Xlint:all', '-Xlint:-serial', '-Xlint:-fallthrough']
compileTestJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'

jar {
    manifest {
        attributes( 'Specification-Title': 'JWebAssembly-Compiler',
                    'Specification-Vendor': 'i-net software',
                    'Specification-Version': archiveVersion,
                    'Implementation-Title': 'JWebAssembly-Compiler',
                    'Implementation-Vendor': 'i-net software',
                    'Implementation-Version': archiveVersion)
    }
}

// task to list deprecated stuff in the compile
tasks.withType(JavaCompile) {
    options.deprecation = true
    options.compilerArgs += ['-Xlint:deprecation']
}

tasks.withType(PublishToMavenRepository) {
    doFirst {
        println("Publishing ${publication.groupId}:${publication.artifactId}:${publication.version} to ${repository.url}")
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveBaseName=archivesBaseName
    archiveAppendix.set("$theAppendix")
    classifier = 'sources'
    from sourceSets.main.java
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveBaseName=archivesBaseName
    archiveAppendix.set("$theAppendix")
    classifier = 'javadoc'
    from javadoc.destinationDir
}

build {
    dependsOn sourcesJar
    dependsOn javadocJar
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

test {
    systemProperty "file.encoding", "UTF-8"
    enableAssertions = true
    testLogging {
        showStandardStreams = true
        showStackTraces = true
        exceptionFormat = 'full'
        events 'passed', 'skipped', 'failed'
    }
}


/****************************************
 * Coverage
 ****************************************/
apply plugin: 'jacoco'

jacocoTestReport {
    tasks.coveralls.dependsOn it
    reports {
        xml.enabled = true  // coveralls plugin depends on xml format report
        html.enabled = true
    }
}
check.dependsOn tasks.coveralls


/****************************************
 * Deploy to Sonatype
 ****************************************/
publishing {
    publications {
        release(MavenPublication) {
            from components.java
            
            artifactId archivePreferredName
            
            artifact(tasks.named("sourcesJar").get())
            artifact(tasks.named("javadocJar").get())
        }
        
        JWebAssembly(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            artifactId archivesBaseName
            pom {
                name = 'JWebAssembly-Compiler'
                description = 'A Java to WebAssembly compiler.'
                url = 'https://github.com/i-net-software/JWebAssembly'
                developers {
                    developer {
                        id = 'Horcrux7'
                        name = 'Volker Berlin'
                        email = 'vberlin@inetsoftware.de'
                        organization = 'i-net software'
                        organizationUrl = 'https://www.inetsoftware.de'
                    }
                }
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:i-net-software/JWebAssembly.git'
                    developerConnection = 'scm:git:git@github.com:i-net-software/JWebAssembly.git'
                    url = 'https://github.com/i-net-software/JWebAssembly'
                }
            }
        }
    }
    repositories {
        mavenLocal()
/* Moved to local gradle script        
        // Store the entire generated libraries to a directory named by the project name
        // in the directory specified in the localRepositoryLocation property in the 
        // gradle properties file in the root directory.
        if (project.hasProperty('localRepositoryLocation') && localRepositoryLocation.length() > 0) {
            maven {
                name 'local'
                url String.format("%s", localRepositoryLocation)
            }
        }
*/

        maven {
            url 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
            if (project.hasProperty("ossrhUsername") ) {
                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
    }
}

signing {
    if (project.hasProperty("signing.keyId") ){
        sign publishing.publications.JWebAssembly

        // does not create sha256 and sha512 checksums
        System.setProperty('org.gradle.internal.publish.checksums.insecure', 'true' )
    }
}

/*
def qedPub = tasks.register("allPublishQed") {
    doLast {
        System.out.println("QED Publishing to MavanLocal and Cloudsmith repositories.")
    } 
}

qedPub.configure( {
    finalizedBy publishAllPublicationsToCloudsmithRepository
    finalizedBy publishAllPublicationsToMavenLocalRepository
    finalizedBy publishAllPublicationsToLocalRepository
})
*/